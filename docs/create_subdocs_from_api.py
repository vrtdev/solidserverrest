#!/usr/bin/python
# -*-coding: utf-8 -*

import sys
import os
import logging
import json
import re
from time import strftime,localtime


sys.path.append(os.getcwd()+'/..')
_logFormat = '%(asctime)-15s [%(levelname)s] %(filename)s:%(lineno)d - %(message)s'
logging.basicConfig(format=_logFormat, level=logging.INFO)

from SOLIDserverRest import *
from SOLIDserverRest.Exception import *

SERVER = '192.168.24.230'
USER = 'ipmadmin'
PWD = 'admin'
PARAMETERS = {
    'site_name': 'site_python_lib_test',
    'description':'test site'
}

con = SOLIDserverRest(SERVER)
con.use_basicauth_sds(user=USER, password=PWD)
con.set_ssl_verify(False)

s = con.get_status()
if 'python_version' not in s:
    assert False, "python version not detected"

for service in SERVICE_MAPPER:
    if re.search('.*find_free.*', service) is not None:
        continue
    
    logging.info("service = "+service)
    
    requierement = {}
    parameters = {}

    doc_string = "# Method "+service
    
    # Find requierements for each SERVICE
    try:
        answerR = con.query(service, {}, option=True)
        json_content = json.loads(answerR.content)

        doc_string += "\n\n## Description"
        for v in json_content:
            if 'description' in v:
                doc_string += "\n\t"+v['description']+'\n'

        doc_string += "\n## Mandatory Input Parameters\n"
        if re.search('_create$', service) is not None:
            for v in json_content:
                if 'mandatory_addition_params' in v:
                    doc_string += "\t"+v['mandatory_addition_params']+'\n'
        
        doc_string += "\n## Input Parameters\n"
        for v in json_content:
            sep = ""
            if ('param_type' in v
                and v['param_type'] == 'in'
                and not 'internal_use' in v):
                s = "\t* "+v['name']+':'
                if 'desc' in v:
                    s += +v['descr']
                if 'type' in v:
                    s += sep+' type: '+v['type']
                    sep = ","
                if 'max_length' in v:
                    s += sep+' max length: '+v['max_length']
                    sep = ","
                if 'default_value' in v:
                    s += sep+' default: '+v['default_value']
                    sep = ","
                if 'can_be_empty' in v:
                    s += ', can be empty: '
                    if v['can_be_empty'] == '1':
                        s += 'true'
                    else:
                        s += 'false'
                if 'enum_values' in v:
                    s += sep+' values: '+v['enum_values']
                    sep = ","
                doc_string += s+'\n'

        doc_string += "\n## Returned Values\n"
        for v in json_content:
            if ('param_type' in v
                and v['param_type'] == 'out'
                and not 'internal_use' in v):
                s = "\t* "+v['name']
                if 'desc' in v:
                    s += ': '+v['descr']
                doc_string += s+"\n"

    except SDSError:
        None

    doc_string += '\n\n*this file is automatically generated*'
    doc_string += ' - date: '+strftime("%d %b %Y %H:%M", localtime())
    
    f = open("{}.md".format(service), "w")
    f.write(doc_string)
    f.close()
    

exit()

try:
    answer = con.query('ip_site_count',
                       timeout=1)
        
    if answer.status_code != 200:
        logging.error(answer.status_code)
        assert False, "native call failed"

except SDSError:
    None

